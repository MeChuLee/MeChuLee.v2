plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "com.google.protobuf" version "0.9.1"
}

android {
    buildFeatures {
        buildConfig = true
    }

    namespace 'com.recommendmenu.mechulee'
    compileSdk 33

    defaultConfig {
        applicationId "com.recommendmenu.mechulee"
        minSdk 26
        targetSdk 33
        versionCode 4
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def naver_key = ""

        def my_server_base_url = ""

        def naver_client_id = ""
        def naver_client_secret = ""

        try {
            Properties localProperties = new Properties()
            localProperties.load(new FileInputStream(rootProject.file("local.properties")))
            if (localProperties.getProperty("naver_key") != null) {
                naver_key = localProperties.getProperty("naver_key")
                naver_client_id = localProperties.getProperty("naver_client_id")
                naver_client_secret = localProperties.getProperty("naver_client_secret")
            }
            if (localProperties.getProperty("my_server_base_url") != null) {
                my_server_base_url = localProperties.getProperty("my_server_base_url")
            }

        } catch (IOException e) {
            e.printStackTrace()
        }

        // 네이버 지도
        manifestPlaceholders = [NAVER_KEY:naver_key]

        // Flask 서버 URL
        buildConfigField "String", "MY_SERVER_BASE_URL", my_server_base_url

        // 네이버 검색
        buildConfigField "String", "NAVER_CLIENT_ID", naver_client_id
        buildConfigField "String", "NAVER_CLIENT_SECRET", naver_client_secret

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }

    buildFeatures {
        buildConfig = true
    }
}

dependencies {
    implementation 'com.github.ome450901:SimpleRatingBar:1.5.1'
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.6.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.6.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.github.st235:expandablebottombar:1.5.1'
    implementation("androidx.fragment:fragment-ktx:1.6.1")
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.airbnb.android:lottie:6.1.0'
    implementation 'com.github.magic-goop:tag-sphere:1.0.0'

    // proto datastore 의존성 추가
    implementation("androidx.datastore:datastore:1.0.0")

    // Protocol Buffers(protobuf)의 Java Lite 버전을 사용하기 위한 의존성을 추가
    // 이를 통해 프로젝트 내에서 Protocol Buffers를 사용
    implementation  "com.google.protobuf:protobuf-javalite:3.19.4"

    implementation 'com.naver.maps:map-sdk:3.17.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'com.orhanobut:logger:2.2.0'

    implementation 'de.hdodenhof:circleimageview:3.1.0' //Circle ImageView
}

// 프로토콜 버퍼(Protocol Buffers 또는 protobuf)는구조화된 데이터를
// 직렬화(serialize)하고, 역직렬화(deserialize)하는 방법을
// 제공하는 언어 중립적인 데이터 포맷
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.19.4"
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}